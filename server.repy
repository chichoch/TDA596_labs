# Represents a blackboard-message.
class Message:
  def __init__(self, content, seqNr, sender):
    self.content = content
    self.seqNr = seqNr
    self.sender = sender
   # self.receiver = sender

  def toString(self):
    return "MESSAGE:" + self.content + "Seq:" + str(self.seqNr) + "Sender:" +\
       self.sender #+ "Receiver:" +self.receiver

# Sort the message list first by sender and then by seq nr to assure same order on all vessels.
def sort_messages():
  items = mycontext['local_message_list']

  #Insertion-sort by sender:
  for i in range(1, len(items)):
    j = i
    while j > 0 and items[j].sender < items[j-1].sender:
      items[j], items[j-1] = items[j-1], items[j]
      j -= 1
  #Insertion-sort by seqNr:
  for i in range(1, len(items)):
    j = i
    while j > 0 and items[j].seqNr < items[j-1].seqNr:
      items[j], items[j-1] = items[j-1], items[j]
      j -= 1

# Inserts a new message into the message list, sorts the list and created the html.  
def insert_message(message):
  # Locks are used to assure mutual exclusion of the list. 
  mycontext['list_lock'].acquire()
  # Adds the message to the list.
  mycontext['local_message_list'].append(message)
  # Sort the list first on seqNr and then IP-address.
  sort_messages()

  # Update the index.html-file
  mycontext['index'] = mycontext['empty_html']
  for message in mycontext['local_message_list']:
    mycontext['index'] = mycontext['index'][:mycontext['index'].find('<p>')+3] + '<p>' + \
          message.content + '</p>' + mycontext['index'][mycontext['index'].find('<p>')+3:]
  mycontext['list_lock'].release()

# Sends a message to all vessels (except this)
def send_to_vessels(message):
  for vessel in mycontext['vessels']:
      if (vessel != getmyip()):
        send_message(vessel, mycontext['port'], message)
        
# Sends a message to all ports (except this)
def send_to_local_ports(message):
  for portnr in mycontext['localports']:
    if(int(portnr) != mycontext['port']):
      send_message('127.0.0.1', int(portnr), message)

# Sends a message to specific ip:port
def send_message(ip, port, message):
  try:
    socket = openconn(ip, port)
    socket.send(message)
    socket.close()
  except Exception, e:
    print '-------SOCKET ERROR------\n' + str(e)

def message_from_string(string):
  content = string[string.find("MESSAGE:") + 8 : string.find("Seq:")]
  seqNr = int(string[string.find("Seq:") + 4 : string.find("Sender:")])
  sender = string[string.find("Sender:") + 7:]
  return Message(content, seqNr, sender)

def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message, 
  except Exception, e:
    print '------RECIEVE ERROR-------\n' + str(e)
    msgheader = ''

  # React depending on message type: HTTP GET or POST, or some other type of communication.
  if msgheader.startswith( 'GET' ):
    # Get the stored html file
    htmlresponse = mycontext['index']
    # Send the html file to the socket
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
    stopcomm(thiscommhandle)   
  
  elif msgheader.startswith( 'POST' ):
    #Get the comment from the post
    comment = msgheader[msgheader.find("comment=")+8:]
    
    #It is important to have mutex access to the clock
    mycontext['clock_lock'].acquire()
    #We have made a new comment, meaning we have to increase the clock.
    mycontext['logical_clock'] += 1
    #Create a message-object.
    message = Message(comment, mycontext['logical_clock'], mycontext['ip'] + ":" + str(mycontext['port']))
    mycontext['clock_lock'].release()

    #Insert the message to the html file
    insert_message(message)
    
    #Get the stored html file
    response = mycontext['index']
    
    #Send the complete file to the socket.
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(response), response))
    stopcomm(thiscommhandle)

    #Send message to vessels or ports, depending on which connection is used.
    if mycontext['connection'] == 'remote':
      send_to_vessels(message.toString()) 
    else:
      send_to_local_ports(message.toString())

  elif msgheader.startswith( 'BREAK' ):
    if mycontext['connection'] == "local":
      for v in mycontext['groupB']:
        if int(v) != mycontext['port']:
          send_message(mycontext['ip'], int(v), "FORGETME&" + str(mycontext['port']))
        mycontext['localports'].remove(v)
      print "BREAK: ", mycontext['localports']
    # Remote  
    else:
      for v in mycontext['groupB']:
        if v != mycontext['ip']:
          send_message(v, mycontext['port'], "FORGETME&" + mycontext['ip'])
        mycontext['vessels'].remove(v)
      print "BREAK: ", mycontext['vessels']
  
  elif msgheader.startswith( 'JOIN' ):
    if mycontext['connection'] == "remote":
      for v in mycontext['groupB']:
        if v != mycontext['ip']:
          send_message(v, mycontext['port'], "REMEMBERME&" + mycontext['ip'])   
      mycontext['vessels'].extend(mycontext['groupB'])
      print "JOIN: ", mycontext['vessels']
    # Local  
    else:
      for v in mycontext['groupB']:
        if int(v) != mycontext['port']:
          send_message(mycontext['ip'], int(v), "REMEMBERME&" + str(mycontext['port']))
      mycontext['localports'].extend(mycontext['groupB'])
      print "JOIN: ", mycontext['localports']
    
  elif msgheader.startswith( 'FORGETME' ):
    if mycontext['connection'] == "remote":
      mycontext['vessels'].remove(msgheader[msgheader.find("&") +1:])
      print "REMOVED: " + msgheader[msgheader.find("&") +1:]
      print "Vessels: ", mycontext['vessels']
    
    # Local
    else:
      mycontext['localports'].remove(msgheader[msgheader.find("&") +1:])
      print "REMOVED: " + msgheader[msgheader.find("&") +1:]
      print "Ports: ", mycontext['localports']

  elif msgheader.startswith( 'REMEMBERME'):
    if mycontext['connection'] == "remote":
      mycontext['vessels'].append(msgheader[msgheader.find("&") +1:])
      print "ADDED: " + msgheader[msgheader.find("&") +1:]
      print "Vessels: ", mycontext['vessels']

    #Local
    else:
      mycontext['localports'].append(msgheader[msgheader.find("&") +1:])
      print "ADDED: " + msgheader[msgheader.find("&") +1:]
      print "Ports: ", mycontext['localports']


  else:
    # Recieved a message.
    # Ignore empty messages. (Can be caused by socket-errors etc.)
    if (msgheader != ''):
      # Create Message-object from String:
      message = message_from_string(msgheader)

      #It is important to have mutex access to the clock
      mycontext['clock_lock'].acquire()
      # Set logical_clock to max(recv.seqNr,logical_clock)
      mycontext['logical_clock'] = max(message.seqNr, mycontext['logical_clock'])
      mycontext['clock_lock'].release()

      # Insert the message in the list, sort it and update html-file.
      insert_message(message)

      if mycontext['iamspecial']:
        if mycontext['connection'] == 'remote':
          if ip in mycontext['groupA']
            for v in mycontext['groupA']:
              if v != mycontext['ip']:
                send_message(msgheader)
          elif ip in mycontext['groupB']
            for v in mycontext['groupB']:
              if v != mycontext['ip']:
                send_message(msgheader)   

        elif mycontext['connection'] == 'local':
          if port in mycontext['groupA']
            for v in mycontext['groupA']:
              if v != str(mycontext['port']):
                send_message(msgheader)
          elif port in mycontext['groupB']
            for v in mycontext['groupB']:
              if v != str(mycontext['port']):
                send_message(msgheader)


  
if callfunc == 'initialize':
  if len(callargs) != 3:
    raise Exception("Need three call arguments")

  # Read and store the html file
  mycontext['index'] = open('index.html', 'r').read()
  mycontext['empty_html'] = mycontext['index']
  # Store which connection type used. (remote or local) 
  mycontext['connection'] = callargs[0]
  # Store port used.
  port = int(callargs[1])
  mycontext['port'] = int(callargs[1])
  mycontext['ip'] = '127.0.0.1'

  # Local logical clock
  mycontext['logical_clock'] = 0

  # Local list with messages
  mycontext['local_message_list'] = []

  mycontext['clock_lock'] = getlock()
  mycontext['list_lock'] = getlock()

  mycontext['message_counter'] = 0
  mycontext['localports'] = []
  mycontext['vessels'] = []
  mycontext['groupB'] = []
  mycontext['groupA'] = []

  if callargs[2] == 'AB':
    mycontext['iamspecial'] = True
  else:
    mycontext['iamspecial'] = False

  # Running remotely: 
  if callargs[0] == 'remote':
    # Read and store ip-addresses of other vessels
    ip = getmyip()
    mycontext['ip'] = ip
    if callargs[2] == "A":
      #You're in group A
      mycontext['vessels'] = open('ipaddressesA.txt','r').read().split()  
    elif callargs[2] == "B":
      #You're in group B
     mycontext['vessels'] = open('ipaddressesB.txt','r').read().split()  
    elif callargs[2] == "AB":
      #You're in group A and B
      mycontext['vessels'] = open('ipaddressesA.txt','r').read().split()
      mycontext['vessels'].extend(open('ipaddressesB.txt','r').read().split())
      mycontext['groupB'] = open('ipaddressesB.txt','r').read().split()
      mycontext['groupA'] = open('ipaddressesA.txt','r').read().split()


  # Running locally.
  elif callargs[0] == 'local':
    # Read and store the ports for running instances on localhost.
    ip = '127.0.0.1'
    if callargs[2] == "A":
      #You're in group A
      mycontext['localports'] = open('localportsA.txt','r').read().split()  
    elif callargs[2] == "B":
      #You're in group B
     mycontext['localports'] = open('localportsB.txt','r').read().split()  
    elif callargs[2] == "AB":
      #You're in group A and B
      mycontext['localports'] = open('localportsA.txt','r').read().split()
      mycontext['localports'].extend(open('localportsB.txt','r').read().split())
      mycontext['groupB'] = open('localportsB.txt','r').read().split()
      mycontext['groupA'] = open('localportsA.txt','r').read().split()

  else:
    raise Exception("First argument needs to be 'remote' or 'local'")
    
  # Whenever this vessel gets a connection on its IPaddress:port it'll call function board
  listencommhandle = waitforconn(ip,port,board)