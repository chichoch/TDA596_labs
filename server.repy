def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message, 
  except Exception, e:
    print '------RECIEVE ERROR-------\n' + str(e)
    msgheader = ''

  # React depending on message type: HTTP GET or POST, or some other type of communication.
  if msgheader.startswith( 'GET' ):
    # Get the stored html file
    htmlresponse = mycontext['index']
    # Send the html file to the socket
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
    stopcomm(thiscommhandle)   
  
  elif msgheader.startswith( 'POST' ):
    #Get the message from the post
    message = msgheader[msgheader.find("comment=")+8:]
    
    # Set logical clock to max(local_clock, seqNr) + 1
    mycontext['logical_clock'] = 
    test = Message(message, 1, ip + ":" + str(mycontext['port']))
    print test.toString()
    #Insert the message to the html file
    insert_message(message)
    
    #Get the stored html file
    response = mycontext['index']
    
    #Send the complete file to the socket.
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(response), response))
    stopcomm(thiscommhandle)

    #Send message to vessels or ports, depending on which connection is used.
    if mycontext['connection'] == 'remote':
      send_to_vessels(message) 
    else:
      send_to_local_ports(message)
     
  else:
    # Recieved a message.
    # Create a Message-object, set logical_clock to max(recv.seqNr,logical_clock) + 1.
    # Put the message in the right place of "local_message_list"
    # create html from the list.

  
if callfunc == 'initialize':
  if len(callargs) != 2:
    raise Exception("Need two call arguments")

  # Read and store the html file
  mycontext['index'] = open('index.html', 'r').read()
  # Store which connection type used. (remote or local) 
  mycontext['connection'] = callargs[0]
  # Store port used.
  port = int(callargs[1])
  mycontext['port'] = int(callargs[1])

  # Local logical clock
  mycontext['logical_clock'] = 0

  # Local list with messages
  mycontext['local_message_list'] = []
  
  # Running remotely: 
  if callargs[0] == 'remote':
    # Read and store ip-addresses of other vessels
    mycontext['vessels'] = open('ipaddresses.txt','r').read().split()  
    ip = getmyip()

  # Running locally.
  elif callargs[0] == 'local':
    # Read and store the ports for running instances on localhost.
    mycontext['localports'] = open('localports.txt', 'r').read().split()
    ip = '127.0.0.1'

  else:
    raise Exception("First argument needs to be 'remote' or 'local'")
    
  # Whenever this vessel gets a connection on its IPaddress:port it'll call function board
  listencommhandle = waitforconn(ip,port,board)

# Inserts a new message into the stored html file  
def insert_message(message):
  index = mycontext['index']
  mycontext['index'] = index[:index.find('<p>')+3] + '<p>' + message + '</p>' + index[index.find('<p>')+3:]

# Sends a message to all vessels (except this)
def send_to_vessels(message):
  for vessel in mycontext['vessels']:
      if (vessel != getmyip()):
        send_message(vessel, mycontext['port'], message)
        
# Sends a message to all ports (except this)
def send_to_local_ports(message):
  for portnr in mycontext['localports']:
    if(int(portnr) != mycontext['port']):
      send_message('127.0.0.1', int(portnr), message)

# Sends a message to specific ip:port
def send_message(ip, port, message):
  try:
    socket = openconn(ip, port)
    socket.send(message)
    socket.close()
  except Exception, e:
    print '-------SOCKET ERROR------\n' + str(e)

def message_from_string(string):
  content = string[string.find("MESSAGE:") + 8 : string.find("Seq:")]
  seqNr = string[string.find("Seq:") + 4 : string.find("Sender:")]
  sender = string[string.find("Sender:") + 7:]
  return Message(content, seqNr, sender)

class Message:
  def __init__(self, content, seqNr, sender):
    self.content = content
    self.seqNr = seqNr
    self.sender = sender

  def toString(self):
    return "MESSAGE:" + self.content + "Seq:" + str(self.seqNr) + "Sender:" + self.sender
